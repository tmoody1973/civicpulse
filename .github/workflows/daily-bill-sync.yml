name: Daily Bill Sync

# When this runs:
# 1. Every day at 2 AM UTC (9 PM EST / 6 PM PST)
# 2. Manually via "Run workflow" button in GitHub Actions tab
on:
  schedule:
    - cron: '0 2 * * *'  # 2 AM UTC daily
  workflow_dispatch:  # Allows manual trigger

jobs:
  sync-bills:
    name: Sync Bills from Congress.gov
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours (fetch ~60min + pipeline ~25min + buffer)

    steps:
      # Step 1: Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Fetch new bills from Congress.gov
      - name: Fetch bills from Congress.gov
        env:
          CONGRESS_API_KEY: ${{ secrets.CONGRESS_API_KEY }}
          RAINDROP_SERVICE_URL: ${{ secrets.RAINDROP_SERVICE_URL }}
        run: |
          echo "üì• Fetching bills from Congress.gov..."
          echo "‚ö†Ô∏è  Full text mode: This will take ~50-60 minutes"
          npm run fetch:bills -- --full
          echo "‚úÖ Bills fetched successfully"

      # Step 5: Run the processing pipeline
      - name: Run post-fetch pipeline
        env:
          RAINDROP_SERVICE_URL: ${{ secrets.RAINDROP_SERVICE_URL }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}
        run: |
          echo "‚öôÔ∏è  Running post-fetch pipeline..."
          echo "  1. AI policy area inference"
          echo "  2. SmartBuckets indexing"
          echo "  3. Algolia sync"
          echo "  4. Search tests"
          npx tsx scripts/post-fetch-pipeline.ts
          echo "‚úÖ Pipeline complete"

      # Step 6: Save sync status (for admin dashboard)
      - name: Save sync status
        if: always()  # Run even if previous steps failed
        env:
          RAINDROP_SERVICE_URL: ${{ secrets.RAINDROP_SERVICE_URL }}
        run: |
          echo "üíæ Saving sync status..."

          # Determine status
          if [ ${{ job.status }} == 'success' ]; then
            STATUS='success'
          else
            STATUS='failure'
          fi

          # Save to database via API
          npx tsx -e "
          import { config } from 'dotenv';
          config();

          const response = await fetch('${RAINDROP_SERVICE_URL}/api/admin/query', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              table: 'sync_history',
              query: \`
                INSERT INTO sync_history (
                  sync_type,
                  status,
                  started_at,
                  completed_at,
                  run_id,
                  run_url
                ) VALUES (?, ?, ?, ?, ?, ?)
              \`,
              values: [
                'daily_bill_sync',
                '${STATUS}',
                new Date().toISOString(),
                new Date().toISOString(),
                '${GITHUB_RUN_ID}',
                'https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'
              ]
            })
          });

          console.log('‚úÖ Sync status saved');
          "

      # Step 7: Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Sync failed! Check logs at:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

# Permissions needed for this workflow
permissions:
  contents: read
